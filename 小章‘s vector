#include<iostream>

using namespace std;

template<typename T>
class myvector {
public:
	myvector(int size = 0):_size(size),_usingsize(0)
	{
		_pvec = new T[size];
	}
	myvector(myvector &src)
	{
		_pvec = new T[src._usingsize];
		for (int i = 0; i < src._usingsize; i++)
		{
			_pvec[i] = src._pvec[i];
		}
		_usingsize = src._usingsize;
		_size = src._size;
		
	}
	~myvector()
	{
		delete[] _pvec;
	}
	void operator=(myvector &src)
	{
		if (_size < src._size)
		{
			delete[] _pvec;
			_pvec = new T[src._usingsize];
		}
		for (int i = 0; i < src._usingsize; i++)
		{
			_pvec[i] = sec._pvec[i];
		}
		_size = src._size;
		_usingsize = src._usingsize;
	}
	T& operator[](const int i)
	{
		return _pvec[i];
	}
	const T& operator[](const int i)const
	{
		return _pvec[i];
	}
	void push_back(T val)
	{
		if (_usingsize == _size)
		{
			resize();
		}
		_pvec[_usingsize++] = val;
	}
	void pop_back()
	{
		if (_usingsize == 0) return;
		_usingsize--;
	}
	bool empty()
	{
		return _usingsize == 0;
	}
	
	class iterator
	{
	public:
		iterator(T *ptr = NULL):_ptr(ptr){}
		bool operator!=(const iterator& it)
		{
			return _ptr != it._ptr;
		}
		iterator operator+(int size)
		{
			return iterator(_ptr + size);
		}
		iterator operator-(int size)
		{
			return iterator(_ptr - size);
		}
		void operator++()
		{
			_ptr++;
		}
		void operator--()
		{
			_ptr--;
		}
		T& operator*()
		{
			return *_ptr;
		}

		T *_ptr;
	};
	iterator begin()
	{
		return iterator(&_pvec[0]);

	}
	iterator end()
	{
		return iterator(&_pvec[_usingsize]);
	}
	
private:
	void resize(int addsize = 20)
	{
		T *newvec = new T[_size + addsize];
		if (newvec == NULL)
		{
			cout << "new error";
			return;
		}
		for (int i = 0; i < _size; i++)
		{
			newvec[i] = _pvec[i];
		}
		delete[] _pvec;
		_pvec = newvec;
		_size += addsize;
	}
	int _usingsize;
	int _size;
	T *_pvec;
};

int main()
{
	myvector<int> vec1;
	vec1.push_back(1);
	vec1.push_back(2);
	//cout << vec1.empty() << endl;
	myvector<int>::iterator it1 = vec1.begin();
	for (; it1 != vec1.end(); ++it1)
	{
		cout << *it1 << " ";
	}

	return 0;
}
